1. ORM
	- ORM(Object Relational Mapping)
		- 객체가 테이블이 되도록 매핑 시켜주는 기술
		- Java의 객체 지향적인 특성을 최대화 
		- Query가 아닌 객체의 메소드 호출만으로도 SQL 실행 가능 -> 생산성 향상
		- 복잡한 쿼리의 경우 표현의 한계, 성능 저하 가능성
	
	- JPA(Java Persistent API)
		- * https://www.oracle.com/technical-resources/articles/javase/persistenceapi.html
		- Java의 ORM API 표준 명세(Interface)
		- 실제 프로젝트 내에서 활용시 구현체가 필요
		- 이에 해당하는 구현 ORM 프레임 워크 : *Mybatis, *Hibernate, EclipseLink 등
		
		- Mybatis
			* https://mybatis.org/mybatis-3/
			- SQL, 저장프로시저 등 고급 매핑을 지원하는 JPA Framework
			- Map 인터페이스, Java POJO(Plain Old Java Object) 매핑을 XML, Annotation 활용
			- 개발자 지정의 SQL 및 복잡한 쿼리 작성 및 실행에 편리
			- DB 벤더사에 종속적(각기 다른 문법 적용) -> 프로젝트 구조는 단조로우나 문법별 유지보수에 한계
			
		- Hibernate 
			* https://hibernate.org/
			- 패러다임의 불일치(단순 데이터 전달 목적으로만 객체 사용과 DB 매핑에서의 오류, 예시. 객체에서 다른 객체 참조시 해당 필드값을 참조 pk 컬럼을 활용)를 극복
			- 메소드 호출만으로 쿼리 수행 -> 생산성 향상, SQL 모니터링 필요
			- DDL, DML 생성 및 실행 -> 유지보수 
			- DB 종속적이지 않음 -> 확장성 용이


2. Mybatis
	- CRUD의 기능을 xml로 구조화하여 Mapper 설정 파일을 한 JDBC구현 프레임 워크
		- 자동으로 Connection close()실행
		- 리턴 타입을 지정하는 경우 자동으로 객체 생성 및 ResultSet 처리
		- SQL을 자바 코드에서 분리 및 기존의 SQL 재실행 가능
		
	- mybatis-config.xml
		- mybatis에서 사용될 DB를 연동하기 위한 설정값들과 mapper.xml을 등록하기 위한 xml
	- mybatis-mapper.xml
		- mybatis에서 사용될 SQL 구문을 담고 있는 xml

	[설정]
		1) xml 환경 설정
			- xml 파일 생성시 config or mapper 파일인지 명시
			- Preferences> XML > XML Catalog > Add...
			
				- config.dtd
					Location : http://mybatis.org/dtd/mybatis-3-config.dtd
					Key : //mybatis.org//DTD Config 3.0//EN
				
				- mapper.dtd
					Location : http://mybatis.org/dtd/mybatis-3-mapper.dtd
					Key : //mybatis.org/DTD Mapper 3.0//EN
				
			Apply and Close
	
		2) pom.xml 설정
		
			* JDK 버전 주의!!
		
		
			- Mybatis 라이브러리 등 maven을 통해 설정
			* 공유내용 참고
	
	
		3) src/main/resources > *.xml 생성 및 설정
			- xml 파일 생성
				XML File > *.xml > Create XML file from a DTD file > select XML Catalog entry > 해당 파일 관련 설정 선택
			
			- xml 파일 설정
				- mybatis-config.xml
					* https://mybatis.org/mybatis-3/ko/configuration.html
				
						엘리먼트			용도
					properties		프로퍼티 파일 경로
									<property>에 개별 프로퍼티 정의 (value=${프로퍼티명} 참조 가능)
					settings		프레임워크 실행 환경 설정
					typeAliases		자바 클래스 alias 설정
					typeHandlers	컬럼 값을 자바 객체로, 자바 객체를 컬럼 값으로 변환 설정
					environments	프레임워크에서 사용할 데이터베이스 정보(트랜잭션 관리자, 데이터 소스) 설정
										<transactionManager>
										JDBC : 직접 JDBC의 commit, rollback 기능을 사용하여 MyBatis 자체에서 트랜잭션을 관리
										
										<dataSource>
										POOLED : MyBatis 자체 DB 커넥션풀 사용
									
					mappers			SQL mapper 파일 경로
		
		
				- *mapper.xml
					* https://mybatis.org/mybatis-3/ko/sqlmap-xml.html
					- mapper 태그의 namespace 속성
						- 위의 공식 문서 참조
							* 별칭
							* 파라미터 설정 : ${ }, #{ }
								- ${ } : Statement
								- #{ } : PreparedStatement
										  단일 파라미터 : #{}
										  다중 파라미터 : map, 객체
		
		4) SqlSessionFactory, SqlSession을 위한 Configuration(@Configuration)
			- Factory Pattern : 객체를 생성하기 위한 인터페이스를 정의하여 어떤 클래스의 인스턴스를 만들지는 서브 클래스에서 결정하게 만드는 패턴
			1) public static SqlSessionFactory getSqlSessionFactory()
			2) public static SqlSession getSqlSession()
			
		5) DB 접속 객체 생성까지 완료했으니, Controller(@Controller), Service(@Service), Mapper(@Mapper) 생성
			- Controller : 요청을 받아들이는 servlet (-> 이후 화면 전환까지 가능)
			- Service : 비즈니스 로직 담당
			- Mapper : 인터페이스로 수행 기능 정의 및 실제 수행 query(mapper.xml) 설정과 연결
		
		rf) HikariCP(Hikari Connection Pool)
			* https://github.com/brettwooldridge/HikariCP
			- HikariCP는 가벼운 용량과 빠른 속도를 가지는 JDBC Connection Pool 프레임워크
			- Spring Boot 기본 설정 CP
			- 버전 
				JDK 8 : 4.0.3, JDK 11: 5.0.1
			
			-설정
				- pom.xml
					<!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
					<!-- https://github.com/brettwooldridge/HikariCP -->
					<!-- JDK 11버전부터는 5.0.1버전 사용 -->
					<dependency>
					    <groupId>com.zaxxer</groupId>
					    <artifactId>HikariCP</artifactId>
					    <version>4.0.3</version>
					</dependency>
			
				- root-context.xml
					<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
						<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
						<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/scott?serverTimezone=Asia/Seoul" />
						<property name="username" value="SCOTT" />
						<property name="password" value="TIGER" />
					</bean>
					
					<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
						<constructor-arg ref="hikariConfig" />
					</bean>
					
					<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
						<property name="dataSource" ref="dataSource" />
						<property name="mapperLocations" value="classpath:?" />	
					</bean>
				
					<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
						<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
					</bean>